esphome:
  name: north-terrace-convector
  friendly_name: North terrace convector

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "uhIh7YHvl0P4qHiOqePFLKMJ//WQHk2psvt+tSPWge0="

ota:
  - platform: esphome
    password: "d9da69201184fdb59433c5613e0fdcb7"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "North-Terrace-Convector"
    password: "UXcN7D1pVSLQ"

captive_portal:

globals: # Create global variable to be used later on
  - id: bypass_state # Store last bypass state
    type: bool
    restore_value: yes # Memorize the last state after restart
    initial_value: 'false'
  - id: fun_speed_state
    type: int
    restore_value: yes
    initial_value: '0'
  - id: climate_lockout_active_state
    type: bool
    restore_value: yes
    initial_value: 'false'

# KMP Electronics PRODINo ESP32 v1 device settings & thermostat logic
# SPI bus settings
spi:
  clk_pin: GPIO18
  mosi_pin: GPIO23
  miso_pin: GPIO19

# Expander config    
mcp23s08:
  - id: 'mcp23s08_hub'
    cs_pin: GPIO32
    deviceaddress: 0

# Fan speed controlled by relay1 (Low), relay2 (Medium) and relay3 (High)
switch:
  # - platform: gpio
  #   name: "RELAY4"
  #   pin:
  #     mcp23xxx: mcp23s08_hub
  #     # Use pin number 4
  #     number: 4
  #     mode: OUTPUT
  #     inverted: False

  # Stop convector if some windows and doors are opened
  - platform: template
    id: climate_lockout_active
    name: "Climate lockout active"
    lambda: |-
      return id(climate_lockout_active_state);
    turn_on_action:
      - logger.log: "Climate lockout is activated"
      - lambda: |-
          id(climate_lockout_active_state) = true;
    turn_off_action:
      - logger.log: "Climate lockout is deactivated"
      - lambda: |-
          id(climate_lockout_active_state) = false; // Day time is set

  # Fan speed control
  - platform: gpio
    id: relay3
    internal: true
    interlock: [relay1, relay2]
    interlock_wait_time: 500ms
    pin:
      mcp23xxx: mcp23s08_hub
      number: 5
      mode: OUTPUT
      inverted: False 
    disabled_by_default: True
  - platform: gpio
    id: relay2
    internal: true
    interlock: [relay1, relay3]
    interlock_wait_time: 500ms
    pin:
      mcp23xxx: mcp23s08_hub
      number: 6
      mode: OUTPUT
      inverted: False 
    disabled_by_default: True
  - platform: gpio
    id: relay1
    internal: true
    interlock: [relay2, relay3]
    interlock_wait_time: 500ms
    pin:
      mcp23xxx: mcp23s08_hub
      number: 7
      mode: OUTPUT
      inverted: False
    disabled_by_default: True
  # Bypass control
  - platform: gpio
    id: bypass_on
    internal: true
    interlock: [bypass_off]
    interlock_wait_time: 500ms
    pin: GPIO13
    on_turn_on:
      - globals.set:
          id: bypass_state
          value: 'true'
      - delay: 10s
      - switch.turn_off: bypass_on
    disabled_by_default: true
  - platform: gpio
    id: bypass_off
    internal: true
    pin: GPIO14
    interlock: [bypass_on]
    interlock_wait_time: 500ms
    on_turn_on:
      - globals.set:
          id: bypass_state
          value: 'false'
      - delay: 10s
      - switch.turn_off: bypass_off
    disabled_by_default: true
  # Virtual bypass
  - platform: template
    name: "Bypass"
    id: bypass
    optimistic: false
    lambda: |-
      return id(bypass_state);
    turn_on_action:
      - switch.turn_on: bypass_on
    turn_off_action:
      - switch.turn_on: bypass_off

select:
  # Virtual FunSpeed
  - platform: template
    name: "FunSpeed"
    id: fun_speed
    optimistic: false
    options:
      - "0"
      - "1"
      - "2"
      - "3"
    lambda: |-
      return to_string(id(fun_speed_state));  
    set_action:
      - lambda: |-
          // Convert selection (x) to int
          int v = atoi(x.c_str());
          id(fun_speed_state) = v;
          // All relays off
          if (v == 0) {
            id(relay1).turn_off();
            id(relay2).turn_off();
            id(relay3).turn_off();
          }
          // Switch on v (selected)
          if (v == 1) id(relay1).turn_on();
          else if (v == 2) id(relay2).turn_on();
          else if (v == 3) id(relay3).turn_on();

# # RGB led on the board
# light:
#   - platform: neopixelbus
#     name: "NeoPixel Light"
#     id: statusLED
#     pin: GPIO0
#     type: GRB
#     variant: WS2812X
#     num_leds: 1

# Set 1-Wire bus
one_wire:
  - platform: gpio
    pin: GPIO21

sensor:
# Room themperature and humidity. DHT22 sensor
  - platform: dht
    pin: GPIO22
    temperature:
      name: "Temperature"
      id: currentTemperature
      filters:
        - sliding_window_moving_average:
            window_size: 10
            send_every: 1
    humidity:
      name: "Humidity"
      id: currentHumidity
    update_interval: 30s

# Fun coil temperature. 1-Wire DS18B20 sensor
  - platform: dallas_temp
    name: "Coil Temperature"
    id: fanCoilTemperature
    update_interval: 30s
    resolution: 9

# Home Assistant Climate Integration
climate:
  - platform: thermostat
    id: room_thermostat
    name: "Thermostat"
    sensor: currentTemperature
    humidity_sensor: currentHumidity
    min_heating_run_time: 5min
    min_heating_off_time: 5min
    min_cooling_run_time: 5min
    min_cooling_off_time: 5min
    min_idle_time: 5min
    on_boot_restore_from: MEMORY
    cool_deadband: 0.2
    cool_overrun: 0.1
    heat_deadband: 0.2
    heat_overrun: 0.1
    visual:
      min_temperature: 15
      max_temperature: 30
      temperature_step: 0.5
    heat_action:
      - logger.log: "Heat"
    cool_action:
      - logger.log: "Cool"
    idle_action:
      - logger.log: "Idle"
    default_preset: Home
    preset:
      - name: Home
        default_target_temperature_low: 22 Â°C
        default_target_temperature_high: 26 Â°C
        mode: HEAT_COOL

interval:
  - interval: 30s
    then:
      - lambda: |-
          float currTemp = id(currentTemperature).state;
          float targetTemp = id(room_thermostat).target_temperature;
          float coilTemp = id(fanCoilTemperature).state;
          int funSpeed = atoi(id(fun_speed).state.c_str());
          bool bypassState = id(bypass).state;
          int thermostatAction = id(room_thermostat).action;
          bool climateLockoutActive = id(climate_lockout_active_state);

          ESP_LOGD("climate_ctrl",
            "Mode:%d | Action:%d | Fun:%d | Bypass:%d | Curr:%.1f | Target:%.1f | Coil:%.1f | ClimateLockout:%d",
            id(room_thermostat).mode, thermostatAction, funSpeed, bypassState,
            currTemp, targetTemp, coilTemp, climateLockoutActive);
          
          // ðŸ§Š Anti freezing functionality
          if(currTemp < 4.0) {
            if (bypassState != 1) id(bypass).turn_on();
            return;
          }
          
          // ðŸ”’ Climate Lockout check
          if (climateLockoutActive) {
            if (funSpeed != 0) {
              auto call = id(fun_speed).make_call();
              call.set_option("0");
              call.perform();
            }

            if (bypassState != 0) id(bypass).turn_off();
            return;
          }

          float dTt = 0.0;
          float dTf = 0.0;
          if(thermostatAction == climate::CLIMATE_ACTION_HEATING) {
            dTt = targetTemp - currTemp;
            dTf = coilTemp - currTemp;
          }
          else { // climate::CLIMATE_ACTION_COOLING
            dTt = currTemp - targetTemp;
            dTf = currTemp - coilTemp;
          }
          if( thermostatAction == climate::CLIMATE_ACTION_HEATING ||
              thermostatAction == climate::CLIMATE_ACTION_COOLING) 
          {
              int new_fan_speed = 0;
              if (bypassState != 1) id(bypass).turn_on();
              if(dTt >= 1.0 && dTf >= 15.0) new_fan_speed = 3;
              else if(dTt >= 0.5 && dTf >= 10.0) new_fan_speed = 2;
              //else if(dTt >= 0.0 && dTf >= 5.0) new_fan_speed = 1;
              else if(dTf >= 5.0) new_fan_speed = 1;

              if (funSpeed != new_fan_speed) {
                std::string opt = std::to_string(new_fan_speed);
                auto call = id(fun_speed).make_call();
                call.set_option(opt);
                call.perform();
              }
              return;
          }

          if( thermostatAction == climate::CLIMATE_ACTION_IDLE ||
              thermostatAction == climate::CLIMATE_ACTION_OFF) 
          {
              if (funSpeed != 0) {
                auto call = id(fun_speed).make_call();
                call.set_option("0");
                call.perform();
              }

              if( dTt >= 1.0 || thermostatAction == climate::CLIMATE_ACTION_OFF)
                  if (bypassState != 0) id(bypass).turn_off();
              return;
          }