esphome:
  name: bedroom-1-convector
  friendly_name: Bedroom 1 convector

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "52cmplvmFrImJyKTql20S/RQTR9SjaOVUIYNhI6GrJI="

ota:
  - platform: esphome
    password: "7d397093cdc5442309a547b9d3f60c85"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Bedroom-1-Convector"
    password: "xbJ6b1jbSuH4"

captive_portal:

globals: # Create global variable to be used later on
  - id: bypass_state # Store last bypass state
    type: bool
    restore_value: yes # Memorize the last state after restart
    initial_value: 'false'
  - id: fun_speed_state
    type: int
    restore_value: yes
    initial_value: '0'
  - id: current_relay_no # Store last running relay
    type: int
    restore_value: no
    initial_value: '0'
  - id: is_last_action_heating # Store last bypass state
    type: bool
    restore_value: no
    initial_value: 'false'

# KMP Electronics PRODINo ESP32 v1 device seetings & thermostat logic
# SPI bus setings
spi:
  clk_pin: GPIO18
  mosi_pin: GPIO23
  miso_pin: GPIO19

# Expander config    
mcp23s08:
  - id: 'mcp23s08_hub'
    cs_pin: GPIO32
    deviceaddress: 0

# Fan speed controled by relay1 (Low), relay2 (Medium) and relay3 (High)
switch:
  # - platform: gpio
  #   name: "RELAY4"
  #   pin:
  #     mcp23xxx: mcp23s08_hub
  #     # Use pin number 4
  #     number: 4
  #     mode: OUTPUT
  #     inverted: False

  # Fan speed control
  - platform: gpio
    id: relay3
    internal: true
    interlock: [relay1, relay2]
    interlock_wait_time: 500ms
    pin:
      mcp23xxx: mcp23s08_hub
      number: 5
      mode: OUTPUT
      inverted: False 
    disabled_by_default: True
  - platform: gpio
    id: relay2
    internal: true
    interlock: [relay1, relay3]
    interlock_wait_time: 500ms
    pin:
      mcp23xxx: mcp23s08_hub
      number: 6
      mode: OUTPUT
      inverted: False 
    disabled_by_default: True
  - platform: gpio
    id: relay1
    internal: true
    interlock: [relay2, relay3]
    interlock_wait_time: 500ms
    pin:
      mcp23xxx: mcp23s08_hub
      number: 7
      mode: OUTPUT
      inverted: False
    disabled_by_default: True
  # Bypass control
  - platform: gpio
    id: bypass_on
    internal: true
    interlock: [bypass_off]
    interlock_wait_time: 500ms
    pin: GPIO13
    on_turn_on:
      - globals.set:
          id: bypass_state
          value: 'true'
      - delay: 10s
      - switch.turn_off: bypass_on
    disabled_by_default: true
  - platform: gpio
    id: bypass_off
    internal: true
    pin: GPIO14
    interlock: [bypass_on]
    interlock_wait_time: 500ms
    on_turn_on:
      - globals.set:
          id: bypass_state
          value: 'false'
      - delay: 10s
      - switch.turn_off: bypass_off
    disabled_by_default: true
  # Virtual bypass
  - platform: template
    name: "Bypass"
    id: bypass
    optimistic: false
    lambda: |-
      return id(bypass_state);
    turn_on_action:
      - switch.turn_on: bypass_on
    turn_off_action:
      - switch.turn_on: bypass_off

select:
  # Virtual FunSpeed
  - platform: template
    name: "FunSpeed"
    id: fun_speed
    optimistic: false
    options:
      - "0"
      - "1"
      - "2"
      - "3"
    lambda: |-
      return to_string(id(fun_speed_state));  
    set_action:
      - lambda: |-
          // Convert selection (x) to int
          int v = atoi(x.c_str());
          id(fun_speed_state) = v;
          // All relays off
          id(relay1).turn_off();
          id(relay2).turn_off();
          id(relay3).turn_off();
          // Swich on v (selected)
          if (v == 1) id(relay1).turn_on();
          else if (v == 2) id(relay2).turn_on();
          else if (v == 3) id(relay3).turn_on();

# # RGB led on the board
# light:
#   - platform: neopixelbus
#     name: "NeoPixel Light"
#     id: statusLED
#     pin: GPIO0
#     type: GRB
#     variant: WS2812X
#     num_leds: 1

# Set 1-Wire bus
one_wire:
  - platform: gpio
    pin: GPIO21

sensor:
# Room themperature and humidity. DHT22 sensor
  - platform: dht
    pin: GPIO22
    temperature:
      name: "Temperature"
      id: currentTemperature
      filters:
        - sliding_window_moving_average:
            window_size: 10
            send_every: 1
    humidity:
      name: "Humidity"
      id: currentHumidity
    update_interval: 30s

# Fun coil temperature. 1-Wire DS18B20 sensor
  - platform: dallas_temp
    name: "Coil Temperature"
    id: fanCoilTemperature
    update_interval: 30s
    resolution: 9

# Home Assistant Climate Integration
climate:
  - platform: thermostat
    id: room_thermostat
    name: "Thermostat"
    sensor: currentTemperature
    humidity_sensor: currentHumidity
    min_heating_run_time: 10s
    min_heating_off_time: 10s
    min_cooling_run_time: 10s
    min_cooling_off_time: 10s
    min_idle_time: 10s
    on_boot_restore_from: MEMORY
    visual:
      min_temperature: 15
      max_temperature: 30
      temperature_step: 0.5
    heat_action:
      - lambda: |-
          id(is_last_action_heating) = true;
    cool_action:
      - lambda: |-
          id(is_last_action_heating) = false;
    idle_action:
      - logger.log: "Ideling"
    default_preset: Home
    preset:
      - name: Home
        default_target_temperature_low: 22 °C
        default_target_temperature_high: 26 °C

interval:
  - interval: 30s
    then:
      - lambda: |-
          bool new_bypass_state = id(bypass_state);
          int new_fan_speed = 0;
          float currTemp = id(currentTemperature).state;
          float targetTemp = id(room_thermostat).target_temperature;
          float coilTemp = id(fanCoilTemperature).state;

          // Anti-freezing functionality in off mode.
          //  CLIMATE_MODE_OFF = 0, CLIMATE_MODE_HEAT_COOL = 1, CLIMATE_MODE_COOL = 2, CLIMATE_MODE_HEAT = 3, CLIMATE_MODE_FAN_ONLY = 4, CLIMATE_MODE_DRY = 5, CLIMATE_MODE_AUTO = 6 
          if(id(room_thermostat).mode == climate::CLIMATE_MODE_OFF)
          {
            // Prevent freezing from 3 degrees and stopped at 5 degrees
            if (currTemp < 3.0) 
            {
              new_bypass_state = true;
            } 
            else
            {
              if (currTemp > 5.0) 
              {
                new_bypass_state = false;
              }
            }
            new_fan_speed = 0; // Off
          }

          // Bypass logic. TBD.
          if(id(is_last_action_heating)) {
            if (currTemp >= (targetTemp + 1)) // Turn on heating. If current t is > target t with 1° switch off bypass and stop heating Example: (23.0 >= (22.0 + 1.0))
            {
              new_bypass_state = false;
            }
            if (currTemp <= targetTemp) // Turn off heating. If current t is < target t  switch on bypass and start heating. Example: (22.0 <= 22.0)
            {
              new_bypass_state = true;
            }
          }
          else { // Cooling
            if (currTemp <= (targetTemp - 1)) // Turn off cooling. If current t is < target t with 1° switch off bypass and stop cooling Example: (25.0 <= (26.0 - 1.0))
            {
              new_bypass_state = false;
            }
            if (currTemp >= targetTemp) // Turn on cooling. If current t is > target t switch on bypass and start cooling. Example: (26.1 >= 26.0)
            {
              new_bypass_state = true;
            }
          }
          
          // Fan (relays) logic. Fun degrees: stop (0), low (1), medium (2), high (3)
          //   CLIMATE_ACTION_OFF = 0, CLIMATE_ACTION_COOLING = 2, CLIMATE_ACTION_HEATING = 3, CLIMATE_ACTION_IDLE = 4, CLIMATE_ACTION_DRYING = 5, CLIMATE_ACTION_FAN = 6
          if(id(room_thermostat).action == climate::CLIMATE_ACTION_HEATING) {
            // If current t is <= target t with 1° AND current t is <= coil t with 15° set to high
            if (currTemp +  1.0 <= targetTemp &&
                currTemp + 15.0 <= coilTemp) {
              new_fan_speed = 3;
            }
            else 
            {
              // If current t is <= target t with 0.5° AND current t is <= coil t with 10° set to medium
              if (currTemp +  0.5 <= targetTemp &&
                  currTemp + 10.0 <= coilTemp) 
              {
                new_fan_speed = 2;
              }
              else 
              {
                // If current t is < target t diffrence is 0 to 0.5° AND current t is < coil t with 5° set to low
                if (currTemp       <  targetTemp &&
                    currTemp + 5.0 <= coilTemp) 
                {
                  new_fan_speed = 1;
                }
              }
            }
          }

          // Process COOL mode
          if(id(room_thermostat).action == climate::CLIMATE_ACTION_COOLING)
          {
            // If current t is >= target t with 1° AND current t is >= coil t with 15° set to high
            if (currTemp -  1.0 >= targetTemp &&
                currTemp - 15.0 >= coilTemp) {
              new_fan_speed = 3;
            }
            else 
            {
              // If current t is >= target t with 0.5° AND current t is >= coil t with 10° set to medium
              if (currTemp -  0.5 >= targetTemp &&
                  currTemp - 10.0 >= coilTemp) 
              {
                new_fan_speed = 2;
              }
              else 
              {
                // If current t is > target t diffrence is 0 to 0.5° AND current t is > coil t with 5° set to low
                if (currTemp       >  targetTemp &&
                    currTemp - 5.0 >= coilTemp) 
                {
                  new_fan_speed = 1;
                }
              }
            }
          }

          // Process decisions
          if (new_bypass_state) id(bypass).turn_on();
          else id(bypass).turn_off();

          std::string opt = std::to_string(new_fan_speed);
          auto call = id(fun_speed).make_call();
          call.set_option(opt);
          call.perform();

          ESP_LOGD("climate_ctrl",
            "Mode:%d | Action:%d | Relay:%d | Bypass:%d | Curr:%.1f | Target:%.1f | Coil:%.1f | IsLastActionHeating:%d",
            id(room_thermostat).mode, id(room_thermostat).action, new_fan_speed, new_bypass_state,
            currTemp, targetTemp, coilTemp, id(is_last_action_heating));